{"version":3,"sources":["Components/AddCategory.tsx","Helpers/getGifs.ts","Components/GifGridItem.tsx","Components/GifGrid.tsx","Hooks/useFetchGifs.ts","Components/GifExpertApp.tsx","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAUaA,EAER,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,cAAiC,EACHC,mBAAiB,IADd,mBAChCC,EADgC,KACpBC,EADoB,KAgBvC,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAA0BP,GAA1B,mBAAyCO,OACvDN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCddG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACyCC,UAC5DH,GAFmB,+DAKQI,MAAMF,GALd,cAKfG,EALe,gBAOgBA,EAAKC,OAPrB,uBAObC,EAPa,EAObA,KAEFC,EAAoBD,EAAKE,KAC7B,SAACC,GAA2B,IAAD,EACzB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdnB,kBAkBdM,GAlBc,4CAAH,sDCCPO,EAAuC,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAChE,OACE,yBAAKc,UAAU,gDACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCFGO,EAAmD,SAAC,GAE1D,IADLnB,EACI,EADJA,SACI,ECHsB,SAACA,GAA8B,IAAD,EAC9Bd,mBAAiB,CACzCqB,KAAM,GACNa,SAAS,IAH6C,mBACjDC,EADiD,KAC1CC,EAD0C,KAexD,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDX2BK,CAAa1B,GAAjCa,EADV,EACIN,KAAca,EADlB,EACkBA,QAEtB,OACE,oCACE,4BAAKpB,GACJoB,GAAW,yCACZ,yBAAKJ,UAAU,aACZH,EAAOJ,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UEZ3BkB,EAAkC,WAAoB,IAAD,EAC5B1C,mBAAmB,CAAC,kBADQ,mBACzD2C,EADyD,KAC7C5C,EAD6C,KAGhE,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACG4C,EAAWpB,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,UCV5C8B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.560505ac.chunk.js","sourcesContent":["import React, {\r\n  useState,\r\n  ChangeEvent,\r\n  FunctionComponent,\r\n  Dispatch,\r\n  SetStateAction,\r\n} from \"react\";\r\n\r\nimport { func } from \"prop-types\";\r\n\r\nexport const AddCategory: FunctionComponent<{\r\n  setCategories: Dispatch<SetStateAction<string[]>>;\r\n}> = ({ setCategories }): JSX.Element => {\r\n  const [inputValue, setInputValue] = useState<string>(\"\");\r\n\r\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e: ChangeEvent<HTMLFormElement>): void => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats: Array<string>) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: func.isRequired,\r\n};\r\n","import { iGifObject, iGifResponse, iGif } from \"./../Interfaces\";\r\n\r\nexport const getGifs = async (category: string): Promise<iGif[]> => {\r\n  const url: string = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=smR5EKSCigh874tzFtL4zUrNKiYzRbke`;\r\n\r\n  const resp: Response = await fetch(url);\r\n\r\n  const { data }: iGifResponse = await resp.json();\r\n\r\n  const gifs: Array<iGif> = data.map(\r\n    (img: iGifObject): iGif => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    }\r\n  );\r\n  return gifs;\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { iImg } from \"./../Interfaces\";\r\n\r\nexport const GifGridItem: FunctionComponent<iImg> = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__bounceInLeft\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { iGif } from \"../Interfaces\";\r\nimport { useFetchGifs } from \"./../Hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid: FunctionComponent<{ category: string }> = ({\r\n  category,\r\n}) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && <p>Loading...</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img: iGif) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"./../Helpers/getGifs\";\r\nimport { iState } from \"../Interfaces\";\r\n\r\nexport const useFetchGifs = (category: string): iState => {\r\n  const [state, setState] = useState<iState>({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { FunctionComponent, useState } from \"react\";\r\nimport { AddCategory } from \"./AddCategory\";\r\nimport { GifGrid } from \"./GifGrid\";\r\n\r\nexport const GifExpertApp: FunctionComponent = (): JSX.Element => {\r\n  const [categories, setCategories] = useState<string[]>([\"One Punch Man\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category: string) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExpertApp } from \"./Components/GifExpertApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}